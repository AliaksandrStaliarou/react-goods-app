{"version":3,"sources":["components/Overlay.js","components/SortingMenu.js","components/FilterMenu.js","components/ProductItemSmall.js","components/ProductItemBig.js","components/ProductItem.js","components/ItemsList.js","components/ItemsListAndFilterMenu.js","App.js","serviceWorker.js","index.js"],"names":["Overlay","react_default","a","createElement","className","this","props","class","React","Component","SortItemsConfig","name","sortField","SortingMenu","state","sortOrder","sortItem","_this2","_this$state","setState","sortingChange","_this3","_this$state2","sortItems","map","item","index","key","toString","onClick","handleSortChange","bind","FilterMenu","_this","query","type","price","from","to","onSearchFilterChange","event","currentTarget","value","filter","onClothesFilterChange","indexOf","push","splice","onPriceFromFilterChange","priceFrom","isNumeric","parseInt","onPriceToFilterChange","priceTo","n","isNaN","parseFloat","isFinite","typeCheckboxList","label","htmlFor","id","onChange","e","placeholder","ProductItemSmall","expanded","onClickFromSmallToBig_And_Overlayer","condition","overlaySwitcher","data","src","image","alt","title","ProductItemBig","available","bigImage","extraInfo","style","fontSize","color","ProductItem","onClickFromSmallToBig","status","ProductItemSmall_ProductItemSmall","ProductItemBig_ProductItemBig","ItemsList","productList","ProductItem_ProductItem","ItemsListAndFilterMenu","products","filteredData","slice","onFilterChange","filterData","toLowerCase","types","filteredList","length","isTypeMatching","isQueryMatching","priceNum","isPriceFromMatching","isPriceToMatching","applyOrder","field","order","sort","b","reverse","SortingMenu_SortingMenu","onSortChange","FilterMenu_FilterMenu","ItemsList_ItemsList","App","Fragment","Overlay_Overlay","ItemsListAndFilterMenu_ItemsListAndFilterMenu","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d933d222.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nclass Overlay extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={this.props.class}></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport { Overlay }","import React from \"react\";\r\nimport products from '../productsData/products'\r\n\r\n\r\n/*\r\nclass SortingMenu extends React.Component {\r\n    state = {\r\n        sortField: null,\r\n        sortOrder: null,\r\n        sortClass: '',\r\n        //sortedItems: this.props.filteredData\r\n    };\r\n    priceHandler = () => {\r\n        this.setState({\r\n            sortField: 'price',\r\n            sortOrder: 'decr',\r\n            sortClass: 'pinkedDecr'\r\n        }, () => {\r\n            this.props.onSortChange(this.state.sortField, this.state.sortOrder);\r\n        });\r\n\r\n       /!* let classValue = this.state.sortedClass;\r\n        if (classValue === '') {\r\n            this.setState({sortedClass: 'pinkedDecr'}, () => {\r\n                this.props.transferringSortedDataDecr(this.state.sortedItems);\r\n            });\r\n            this.sortingDecr();\r\n        } else if (classValue === 'pinkedDecr'){\r\n            this.setState({sortedClass: 'pinkedIncr'});\r\n        } else if (classValue === 'pinkedIncr') {\r\n            this.setState({sortedClass: 'pinkedDecr'});\r\n        }*!/\r\n\r\n    };\r\n    sortDecr = (a, b) => {\r\n        if (a.priceNum < b.priceNum) return 1;\r\n        if (a.priceNum > b.priceNum) return -1;\r\n    };\r\n    sortIncr =(a, b) => {\r\n        if (a.priceNum > b.priceNum) return 1;\r\n        if (a.priceNum < b.priceNum) return -1;\r\n    };\r\n    sortingDecr = () => {\r\n        let itemsDecr = this.props.filteredData;\r\n        itemsDecr.sort(this.sortDecr);\r\n        this.setState({sortedItems: itemsDecr});\r\n        //console.log(itemsDecr);\r\n    };\r\n    sortingIncr = () => {\r\n        let itemsIncr = this.props.filteredData;\r\n        itemsIncr.sort(this.sortIncr);\r\n        this.setState({sortedItems: itemsIncr});\r\n    };\r\n\r\n\r\n    render() {\r\n            return (\r\n                <ul>\r\n                    <li className={this.state.sortClass} onClick={this.priceHandler}><span>цене</span></li>\r\n                    <li onClick={this.alphabetHandler}><span>алфавиту</span></li>\r\n                </ul>\r\n            )\r\n    }\r\n\r\n\r\n}*/\r\n\r\nconst SortItemsConfig = [\r\n    {\r\n        name: 'цене',\r\n        sortField: 'priceNum'\r\n    },\r\n    {\r\n        name: 'алфавиту',\r\n        sortField: 'title'\r\n    }\r\n];\r\n\r\n\r\nclass SortingMenu extends React.Component {\r\n    state = {\r\n        sortField: null,\r\n        sortOrder: null\r\n    };\r\n\r\n    handleSortChange(sortItem) {\r\n        let { sortField, sortOrder} = this.state;\r\n        const hasSortFieldChanged = sortField !== sortItem.sortField;\r\n        if (hasSortFieldChanged) {\r\n            sortOrder = 'desc';\r\n        } else {\r\n            sortOrder = sortOrder === 'desc' ? 'asc' : 'desc';\r\n        }\r\n        this.setState({\r\n            sortField: sortItem.sortField,\r\n            sortOrder: sortOrder\r\n        }, () => {\r\n            this.props.sortingChange(this.state.sortField, this.state.sortOrder);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { sortField, sortOrder} = this.state;\r\n        const sortItems = SortItemsConfig.map(\r\n            (item, index) => {\r\n                const className = (sortField === item.sortField) ? (sortOrder === 'desc' ? 'pinkedDecr' : 'pinkedIncr') : '';\r\n                return <li className={className}\r\n                           key={index.toString()}\r\n                           onClick={this.handleSortChange.bind(this, item)}\r\n                ><span>{ item.name }</span></li>\r\n            }\r\n        );\r\n        return (\r\n            <ul>\r\n                { sortItems }\r\n            </ul>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport { SortingMenu }","import React from \"react\";\r\nimport {SortingMenu} from \"./SortingMenu\";\r\n\r\n\r\nclass FilterMenu extends React.Component {\r\n    state = {\r\n        sortField: this.props.sortField,\r\n        sortOrder: this.props.sortOrder,\r\n        query: '',\r\n        type: [],\r\n        price: {\r\n            from: null,\r\n            to: null\r\n        }\r\n    };\r\n\r\n\r\n    onSearchFilterChange = (event) => {\r\n        //this.setState({query: event.currentTarget.value});\r\n        this.setState({\r\n            query: event.currentTarget.value\r\n        }, () => {\r\n            this.props.filter(this.state)\r\n        })\r\n    };\r\n    onClothesFilterChange = (item) => {\r\n        let type = this.state.type;\r\n        if (type.indexOf(item) === -1) {\r\n            type.push(item);\r\n        } else {\r\n            let index = type.indexOf(item);\r\n            type.splice(index, 1);\r\n        }\r\n        this.setState({type: type});\r\n        this.props.filter(this.state);\r\n    };\r\n    onPriceFromFilterChange = (event) => {\r\n        let priceFrom = event.currentTarget.value;\r\n        let isNumber = this.isNumeric(priceFrom);\r\n        if (isNumber === true) {\r\n            this.setState({\r\n                price: {\r\n                    from: parseInt(priceFrom),\r\n                    to: this.state.price.to\r\n                }\r\n            }, () => {\r\n                this.props.filter(this.state);\r\n            });\r\n        } else {\r\n            this.setState({\r\n                price: {\r\n                    from: null,\r\n                    to: this.state.price.to\r\n                }\r\n            }, () => {\r\n                this.props.filter(this.state);\r\n            });\r\n        }\r\n    };\r\n    onPriceToFilterChange = (event) => {\r\n        let priceTo = event.currentTarget.value;\r\n        let isNumber = this.isNumeric(priceTo);\r\n        if (isNumber === true) {\r\n           this.setState({\r\n               price: {\r\n                   from: this.state.price.from,\r\n                   to: parseInt(priceTo)\r\n               }\r\n           }, () => {\r\n               this.props.filter(this.state);\r\n           });\r\n        } else {\r\n            this.setState({\r\n                price: {\r\n                    from: this.state.price.from,\r\n                    to: null\r\n                }\r\n            }, () => {\r\n                this.props.filter(this.state);\r\n            });\r\n        }\r\n    };\r\n\r\n    //numeric checking\r\n    isNumeric = (n) => {\r\n        return !isNaN(parseFloat(n)) && isFinite(n);\r\n    };\r\n\r\n    render() {\r\n        const TYPES = [\r\n            {\r\n                type: 'jeans',\r\n                label: 'Джинсы'\r\n            },\r\n            {\r\n                type: 'shirt',\r\n                label: 'Рубашки'\r\n            },\r\n            {\r\n                type: 'suit',\r\n                label: 'Костюмы'\r\n            },\r\n        ];\r\n        let typeCheckboxList = TYPES.map(item => {\r\n            return(\r\n                <li>\r\n                    <label htmlFor={item.type}>\r\n                        <input type=\"checkbox\" id={item.type}\r\n                               onChange={e => this.onClothesFilterChange(item.type) }/>\r\n                        <span>{item.label}</span>\r\n                    </label>\r\n                </li>\r\n            )\r\n        });\r\n        return (\r\n            <div className=\"filterContainer\">\r\n                <div className=\"searchInput\">\r\n                    <input type=\"text\" placeholder=\"Поиск\" onChange={this.onSearchFilterChange}/>\r\n                </div>\r\n                <div className=\"filterContainer_clothes\">\r\n                    <p>Одежда</p>\r\n                    <ul>\r\n                        {typeCheckboxList}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"filterContainer_price\">\r\n                    <p>Цена</p>\r\n                    <div>\r\n                        <input id=\"from\" type=\"text\" placeholder='от' onChange={this.onPriceFromFilterChange}/>\r\n                        <input id=\"to\" type=\"text\" placeholder='до' onChange={this.onPriceToFilterChange}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport { FilterMenu }","import React from \"react\";\r\n\r\n\r\n// <img src={require('./images/shirt1_sm.jpg')} alt=\"\"/>\r\nclass ProductItemSmall extends React.Component {\r\n    state = {\r\n        expanded: true,\r\n        class: 'overlay',\r\n    };\r\n    onClickFromSmallToBig_And_Overlayer = () => {\r\n        this.props.condition(this.state.expanded);\r\n        this.props.overlaySwitcher(this.state.class);\r\n    };\r\n    render() {\r\n        let item = this.props.data;\r\n        return(\r\n            <div className=\"itemContainer\">\r\n                <div className=\"item\" >\r\n                    <div className=\"item_imgAndTitle\">\r\n                        <figure>\r\n                            <img src={item.image} alt=\"\"/>\r\n                        </figure>\r\n                        <p>{item.title}</p>\r\n                        <button onClick={this.onClickFromSmallToBig_And_Overlayer}>Подробнее</button>\r\n                    </div>\r\n                    <p>{item.price}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport { ProductItemSmall }","import React from \"react\";\r\n\r\n\r\nclass ProductItemBig extends React.Component {\r\n    state = {\r\n        expanded: false,\r\n        class: '',\r\n    };\r\n    render() {\r\n        let available = this.props.data.available;\r\n        let item = this.props.data;\r\n        return (\r\n            <div className=\"itemExp\">\r\n                <div className=\"itemExp_imgAndPrice\">\r\n                    <figure>\r\n                        <img src={item.bigImage} alt=\"\"/>\r\n                    </figure>\r\n                </div>\r\n                <div className=\"itemExp_titleAndDescription\">\r\n                    <p onClick={() => {\r\n                        this.props.condition(this.state.expanded);\r\n                        this.props.overlaySwitcher(this.state.class);\r\n                    }}>x</p>\r\n                    <p>{item.title}</p>\r\n                    <div>\r\n                        <p>Краткое описание</p>\r\n                        <p>{item.extraInfo}</p>\r\n                    </div>\r\n                    {available == true ?\r\n                        <p style={{fontSize: \"1.2em\", color: \"green\"}}>В наличии</p> :\r\n                        <p style={{fontSize: \"1.2em\", color: \"red\"}}>Под заказ</p>\r\n                    }\r\n                    <p>{item.price}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport { ProductItemBig }","import React from \"react\";\r\nimport { ProductItemSmall } from'./ProductItemSmall';\r\nimport { ProductItemBig } from'./ProductItemBig';\r\n\r\n\r\nclass ProductItem extends React.Component {\r\n    state = {\r\n        expanded: false,\r\n    };\r\n    onClickFromSmallToBig = (status) => {\r\n        this.setState({expanded: status})\r\n    };\r\n    render() {\r\n        let expanded = this.state.expanded;\r\n        if (expanded === false) {\r\n            return(\r\n                <ProductItemSmall data={this.props.data}\r\n                                  condition={this.onClickFromSmallToBig}\r\n                                  overlaySwitcher={this.props.overlaySwitcher} />\r\n            )\r\n        } else {\r\n            return(\r\n                <ProductItemBig data={this.props.data}\r\n                                condition={this.onClickFromSmallToBig}\r\n                                overlaySwitcher={this.props.overlaySwitcher} />\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport { ProductItem }","import React from \"react\";\r\nimport { ProductItem } from'./ProductItem';\r\n\r\n\r\nclass ItemsList extends React.Component {\r\n    render() {\r\n        // let overlaySwitcher = this.props.overlaySwitcher\r\n        let productList = this.props.data.map(item => {\r\n            return <ProductItem key={item.id} data={item} overlaySwitcher={this.props.overlaySwitcher}/>\r\n        });\r\n\r\n        return(\r\n            <div className=\"itemsList\">\r\n                {productList}\r\n               {/* {productList.sort( () => {\r\n                    return 0.5 - Math.random();\r\n                })}*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport { ItemsList }","import React from \"react\";\r\nimport products from '../productsData/products'\r\nimport { SortingMenu } from'./SortingMenu';\r\nimport { FilterMenu } from'./FilterMenu';\r\nimport { ItemsList } from'./ItemsList';\r\n\r\n\r\nclass ItemsListAndFilterMenu extends React.Component {\r\n    state = {\r\n        sortField: null,\r\n        sortOrder: null,\r\n        data: products,\r\n        filteredData: products.slice(),\r\n    };\r\n\r\n    onFilterChange = (filterData) => {\r\n        let query = filterData.query.toLowerCase();\r\n        let types = filterData.type;\r\n        let priceFrom = filterData.price.from;\r\n        let priceTo = filterData.price.to;\r\n\r\n        let isTypeMatching = (item) => {\r\n            if (types.length === 0) {\r\n                return true;\r\n            }\r\n            return types.indexOf(item.type) !== -1;\r\n        };\r\n\r\n        let isQueryMatching = (item) => {\r\n            if (query.length === 0) {\r\n                return true;\r\n            }\r\n            return item.title.toLowerCase().indexOf(query) !== -1;\r\n        };\r\n\r\n        let isPriceFromMatching = (item) => {\r\n            if (priceFrom === null) {\r\n                return true;\r\n            }\r\n            return item.priceNum >= priceFrom;\r\n        };\r\n\r\n        let isPriceToMatching = (item) => {\r\n            if (priceTo === null) {\r\n                return true;\r\n            }\r\n            return item.priceNum <= priceTo;\r\n        };\r\n\r\n        let filteredList = this.state.data.filter(item => {\r\n            return isTypeMatching(item)\r\n                && isQueryMatching(item)\r\n                && isPriceFromMatching(item)\r\n                && isPriceToMatching(item);\r\n        });\r\n\r\n\r\n        this.applyOrder(filteredList);\r\n\r\n    };\r\n\r\n    onSortChange(field, order) {\r\n        this.setState({sortField: field, sortOrder: order}, () => {\r\n            this.applyOrder();\r\n        });\r\n\r\n    };\r\n\r\n    applyOrder(filteredList) {\r\n        const { sortField, sortOrder } = this.state;\r\n        if (!filteredList) {\r\n            filteredList = (this.state.filteredData || this.state.data).slice(); // копируем список, чтобы не отсортировать по ссылке\r\n        }\r\n        filteredList.sort((a, b) => { // сортировка по полю\r\n            if (a[sortField] > b[sortField]) return 1;\r\n            if (a[sortField] < b[sortField]) return -1;\r\n            return 0;\r\n        });\r\n        if (sortOrder === 'asc') filteredList.reverse();\r\n        this.setState({filteredData: filteredList});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"sortingMenu\">\r\n                    <p>Сортировать по:</p>\r\n                    <SortingMenu className={this.props.class}\r\n                        //filter={this.onFilterChange}\r\n                                 sortingChange={this.onSortChange.bind(this)}\r\n                        //filteredData={this.state.filteredData}\r\n                        //transferringSortedDataDecr={this.transferringSortedDataDecr}\r\n\r\n                    />\r\n                </div>\r\n                <div className=\"itemsListAndFilter\">\r\n                    <FilterMenu filter={this.onFilterChange.bind(this)}\r\n                                sortField={this.state.sortField}\r\n                                sortOrder={this.state.sortOrder}\r\n                    />\r\n                    <ItemsList data={this.state.filteredData}\r\n                               overlaySwitcher={this.props.overlaySwitcher} />\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport { ItemsListAndFilterMenu }","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Overlay } from './components/Overlay'\r\nimport { ItemsListAndFilterMenu } from './components/ItemsListAndFilterMenu'\r\n\r\n\r\nclass App extends Component {\r\n    state = {\r\n        class: '',\r\n    };\r\n    overlaySwitcher = (status) => {\r\n        this.setState({ class: status})\r\n    };\r\n    render() {\r\n    return (\r\n        <React.Fragment>\r\n            <Overlay class={this.state.class}/>\r\n            <ItemsListAndFilterMenu overlaySwitcher={this.overlaySwitcher} />\r\n        </React.Fragment>\r\n\r\n//\r\n        \r\n      /*<div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n        </header>\r\n      </div>*/\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}